@use 'sass:map';
@use 'sass:meta';
@use '/src/helpers/styles/abstracts/responsive' as *;
@use '/src/helpers/styles/abstracts/variables';

// -----------------------------------------------------------------------------
// This file contains all application-wide Sass root properties.
// -----------------------------------------------------------------------------

.wp-block-mps-mappps {
  color-scheme: light; // not sure if it's good but prevent devices to mess up colors

  @each $state-color, $value in variables.$state-colors {
    --color-#{$state-color}: #{$value};
    --color-rgb-#{$state-color}: #{hex-to-rgb($value)};
  }

  @each $color, $value in variables.$colors {
    --color-#{$color}: #{$value};
    --color-rgb-#{$color}: #{hex-to-rgb($value)};
  }

  @each $font-title, $font-info in variables.$fonts {
    $font-name: map.get($font-info, 'name');
    $font-serif: map.get($font-info, 'serif');
    @if $font-serif {
      --font-#{$font-title}: #{$font-name}, #{$font-serif};
    } @else {
      --font-#{$font-title}: #{$font-name};
    }
  }

  @each $size, $value in variables.$font-sizes {
    --font-level-#{$size}: #{$value};
  }

  @each $radius, $value in variables.$radiuses {
    --radius-#{$radius}: #{$value};
  }

  @each $bp, $value in variables.$grid-breakpoints {
    --breakpoint-#{$bp}: #{$value};
  }

  @each $spacing, $value in variables.$spacings {
    --spacing-#{$spacing}: #{$value};
  }

  @each $shadow, $value in variables.$shadows {
    --shadow-#{$shadow}: #{$value};
  }

  @each $custom, $value in variables.$customs {
    @if (meta.type-of($value) == 'map') {
      $breakpoints: $value;

      @each $breakpoint, $value in $breakpoints {
        @include media-breakpoint-up($breakpoint) {
          --#{$custom}: #{$value};
        }
      }
    } @else {
      --#{$custom}: #{$value};
    }
  }

  @media (prefers-reduced-motion: reduce) {
    --nomotion: none;
  }
}
